---
# 1. Failure conditions
# -----------------------------------------------------------------------------
- name: "vsphere : Fail if vcenter_host, vcenter_username, or vcenter_password are not provided"
  assert:
    that: 
      - vcenter_host is defined and vcenter_host != ""
      - vcenter_username is defined and vcenter_username != ""
      - vcenter_password is defined and vcenter_password != ""
    fail_msg: "One or more required variables are not defined"


# 2. Debug Info
# -----------------------------------------------------------------------------
- name: "vsphere : Debug information"
  debug:
    msg:
      - "Cluster name ................. {{ cluster_name }}"
      - "OCP version .................. {{ ocp_version }}"
      - "OCP download directory ....... {{ ocp_download_directory }}"
      - "VCenter host ................. {{ vcenter_host }}"
      - "VCenter username ............. {{ vcenter_username }}"
      - "VCenter password ............. {{ vcenter_password }}"

# 3. Download OCP installer and client from https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp
# -----------------------------------------------------------------------------
- name: "vsphere: downloading OCP {{ ocp_version }} installer from {{ ocp_download_url }}/{{ ocp_version }}/openshift-install-linux.tar.gz"
  shell: |
    mkdir -p {{ ocp_download_directory }}
    curl -w '%{http_code}\n' -o {{ ocp_download_directory }}/installer-{{ ocp_version }}.tar.gz "{{ ocp_download_url }}/{{ ocp_version }}/openshift-install-linux.tar.gz"
  register: curl_output
  failed_when: >
    (curl_output.rc != 0) or 
    (curl_output.stdout != "200")

- name: "vsphere: downloading OCP {{ ocp_version }} client from {{ ocp_download_url }}/{{ ocp_version }}/openshift-client-linux.tar.gz"
  shell: |
    curl -w '%{http_code}\n' -o {{ ocp_download_directory }}/client-{{ ocp_version }}.tar.gz "{{ ocp_download_url }}/{{ ocp_version }}/openshift-client-linux.tar.gz"
  register: curl_output
  failed_when: >
    (curl_output.rc != 0) or 
    (curl_output.stdout != "200")

- name: "vsphere: extracting OCP installer and client to {{ ocp_download_directory }}"
  shell: |
    tar xf {{ ocp_download_directory }}/client-{{ ocp_version }}.tar.gz -C {{ ocp_download_directory }}
    tar xf {{ ocp_download_directory }}/installer-{{ ocp_version }}.tar.gz -C {{ ocp_download_directory }}
  register: tar_output
  failed_when: >
    (tar_output.rc != 0)

- name: "vsphere: list downloaded OCP files in {{ ocp_download_directory }}"
  shell: ls -al {{ ocp_download_directory }}
  register: ls_output
- debug:
    msg: "{{ ls_output.stdout_lines }}"

# 4. Test connection VCenter admin endpoint at {{ vcenter_host }}
# -----------------------------------------------------------------------------
- name: "vsphere: test connection VCenter admin endpoint at {{ vcenter_host }}"
  vcenter_utils:
    method: pingVCenter
    vcenter_host: "{{ vcenter_host }}"
    vcenter_username: "{{ vcenter_username }}"
    vcenter_password: "{{ vcenter_password }}"
  register: vcenter_utils_output

- name: "vsphere: dump output from VCenter ping command"
  debug:
    msg: 
      - "{{ vcenter_utils_output }}"