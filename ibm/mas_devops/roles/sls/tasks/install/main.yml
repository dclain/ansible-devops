---
# 1. Check for missing properties that do not have defaults
# -----------------------------------------------------------------------------
- name: "Fail if sls_entitlement_key has not been provided"
  assert:
    that: sls_entitlement_key is defined and sls_entitlement_key != ""
    fail_msg: "sls_entitlement_key property has not been set"

- name: "Fail if no MongoDb config is provided"
  assert:
    that: sls_mongodb is defined or (sls_mongodb_cfg_file is defined and sls_mongodb_cfg_file != "")
    fail_msg: "Either sls_mongodb_cfg_file or mongodb properties must be set"

- name: "Fail if missing any mongodb information"
  when:
    - sls_mongodb is defined
  assert:
    that:
      - sls_mongodb.hosts is defined
      - sls_mongodb.username is defined
      - sls_mongodb.password is defined
    fail_msg: "Review provided MongoDb details, it is missing required elements"


# 2. Provide debug information
# -----------------------------------------------------------------------------
- name: "Debug information"
  debug:
    msg:
      - "Catalog Source ................ {{ sls_catalog_source }}"
      - "SLS channel ................... {{ sls_channel }}"
      - "SLS namespace ................. {{ sls_namespace }}"
      - "SLS ICR cp content ............ {{ sls_icr_cp }}"
      - "SLS ICR cpopen content ........ {{ sls_icr_cpopen }}"
      - "SLS Instance Name ............. {{ sls_instance_name }}"
      - "SLS MongoCfg file .............. {{ sls_mongodb_cfg_file | default('<undefined>', True) }}"
      - "SLS Bootstrap ................. {{ bootstrap.license_id != '' or bootstrap.license_file != '' or bootstrap.registration_key != '' }}"
      - "SLS Bootstrap license file ..... {{ bootstrap.license_file }}"
      - "SLS Bootstrap license id ...... {{ bootstrap.license_id }}"

- name: "Create SLS Namespace"
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{sls_namespace}}"


# 3. Set up the domain name for SLS
# -----------------------------------------------------------------------------
- name: "Get cluster subdomain"
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    kind: Ingress
    name: cluster
  register: _cluster_subdomain

- name: "Configure default domain if not set"
  when: not sls_domain
  set_fact:
    sls_domain: "{{ sls_namespace }}.{{ _cluster_subdomain.resources[0].spec.domain }}"


# 4. Install Operator & create entitlement
# -----------------------------------------------------------------------------
- name: "Install SLS Operator"
  include_role:
    name: ibm.mas_devops.install_operator
  vars:
    namespace: "{{ sls_namespace }}"
    icr_host: "{{ sls_icr_cp }}"
    icr_username: "{{ sls_entitlement_username }}"
    icr_password: "{{ sls_entitlement_key }}"
    catalog_source: "{{ sls_catalog_source }}"
    operator_group: "{{ lookup('template', 'templates/operator-group.yml.j2') }}"
    subscription: "{{ lookup('template', 'templates/subscription.yml.j2') }}"


# 5. Wait until the LicenseService CRD is available
# -----------------------------------------------------------------------------
- name: "Wait until the LicenseService CRD is available"
  kubernetes.core.k8s_info:
    api_version: apiextensions.k8s.io/v1
    name: "licenseservices.sls.ibm.com"
    kind: CustomResourceDefinition
    wait: yes
    wait_sleep: 10
    wait_timeout: 300 # 5 mins until we give up waiting for the CRD to get into the expected state
    wait_condition:
      type: NamesAccepted
      status: "True"
  register: sls_crd_info
  retries: 120 # ~approx 5 minutes before we give up waiting for the CRD to be created
  delay: 5 # seconds
  until:
    - sls_crd_info.resources is defined
    - sls_crd_info.resources | length > 0


# 6. Create Mongo Secret
# -----------------------------------------------------------------------------
- name: Read MongoDb config file
  set_fact:
    mongocfg: "{{ lookup('file', sls_mongodb_cfg_file) | from_yaml_all  }}"
  when: sls_mongodb_cfg_file is defined

- name: Overide MongoDb facts bases on mongocfg
  set_fact:
    mongodb:
      username: "{{ mongocfg[0].stringData.username }}"
      password: "{{ mongocfg[0].stringData.password }}"
      hosts: "{{ mongocfg[1].spec.config.hosts }}"
  when: mongocfg is defined

- name: Create the Mongo Secret for SLS
  kubernetes.core.k8s:
    state: present
    namespace: '{{ sls_namespace }}'
    template: templates/mongo-secret.yml.j2


# 7. Bootstrap the license service
# -----------------------------------------------------------------------------
- include_tasks: tasks/install/bootstrap.yml
  when: bootstrap.license_id != '' or bootstrap.license_file != '' or bootstrap.registration_key != ''


# 8. Integrated Airgap support
# -----------------------------------------------------------------------------
# Before we create the CR we will set up the Airgap Image Map
# We need to install the digest imagemap for ibm-sls and ibm-truststore-mgr
- name: "Determine whether this is an airgap environment"
  include_tasks: "{{ role_path }}/../../common_tasks/detect_airgap.yml"

- name: "Enable use of image digests"
  when: airgap_install
  include_tasks: "tasks/install/install_digest_cm.yml"


# 9. Create the license service CR
# -----------------------------------------------------------------------------
- name: Create the sls.ibm.com/v1.LicenseService
  kubernetes.core.k8s:
    state: present
    namespace: '{{ sls_namespace }}'
    template: templates/licenseservice.yml.j2
  register: sls_cr_result


# 10. Wait for it to hit Ready
# -----------------------------------------------------------------------------
- include_tasks: "tasks/install/sls-verify.yml"


# 11. Generate SLSCfg
# -----------------------------------------------------------------------------
# The SLSCfg resource is not generated as part of this role anymore, a dedicated
# role exists to generate the configuraion file (gencfg_sls), this role will set
# up all the properties required by that role before calling it
# - sls_registration_key
# - sls_url
# - sls_tls_crt
- name: Lookup sls.ibm.com/v1.LicenseService
  when:
    - mas_instance_id is defined
    - mas_instance_id != ""
    - mas_config_dir is defined
    - mas_config_dir != ""
  k8s_info:
    api_version: sls.ibm.com/v1
    kind: LicenseService
    name: "{{ sls_instance_name }}"
    namespace: "{{ sls_namespace }}"
  register: sls_cr_result

- name: Obtain License Service Certificate
  when:
    - mas_instance_id is defined
    - mas_instance_id != ""
    - mas_config_dir is defined
    - mas_config_dir != ""
  k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ sls_cr_result.resources[0].status.ca.secretName }}"
    namespace: "{{ sls_namespace }}"
  register: _sls_ca

- name: Set facts for SLSCfg
  when:
    - mas_instance_id is defined
    - mas_instance_id != ""
    - mas_config_dir is defined
    - mas_config_dir != ""
  set_fact:
    sls_registration_key: "{{sls_cr_result.resources[0].status.registrationKey}}"
    sls_url: "{{sls_cr_result.resources[0].status.url}}"
    sls_tls_crt: "{{_sls_ca.resources[0].data['ca.crt'] | b64decode }}"
