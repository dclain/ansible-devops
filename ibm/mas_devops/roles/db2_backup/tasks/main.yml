---
# 1. Fail if no required keys are provided
# -----------------------------------------------------------------------------
- name: "Assert that db2_backup_instance_name is defined"
  assert:
    that:
      - db2_backup_instance_name is defined
      - db2_backup_instance_name != ""
    fail_msg: "db2_backup_instance_name property is required"

- name: "Assert that db2_backup_dir is defined"
  assert:
    that:
      - db2_backup_dir is defined
      - db2_backup_dir != ""
    fail_msg: "db2_backup_dir property is required"

- name: "Assert that db2_namespace is defined"
  assert:
    that:
      - db2_namespace is defined
      - db2_namespace != ""
    fail_msg: "db2_namespace property is required"

# 2. Determine which pod to run in
# -----------------------------------------------------------------------------
- name: "Lookup db2 Pod {{ db2_backup_instance_name }} in {{ db2_namespace }} namespace"
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ db2_namespace }}"
    label_selectors:
      - type=engine
      - app={{ db2_backup_instance_name }}
  register: db2_pod
  failed_when:
    - db2_pod.resources is not defined
    - db2_pod.resources | length = 0

- name: Configure facts
  set_fact:
    db2_pod_name: "{{ db2_pod.resources[0].metadata.name if (db2_pod.resources is defined) else 'Undefined' }}"


# 3. Provide debug information to the user
# -----------------------------------------------------------------------------
- name: "Debug information"
  debug:
    msg:
      - "Db2 instance name ...................... {{ db2_backup_instance_name if (db2_backup_instance_name is defined) else 'Undefined' }}"
      - "Db2 namespace .......................... {{ db2_namespace if (db2_namespace is defined) else 'Undefined' }}"
      - "Db2 pod name ........................... {{ db2_pod_name if (db2_pod_name is defined) else 'Undefined' }}"
      - "DB2 backup files directory ............. {{ db2_backup_dir if (db2_backup_dir is defined) else 'Undefined' }}"


# 4. Run backup script in source db2wh pod
# -----------------------------------------------------------------------------
- name: Create backup script in local /tmp
  ansible.builtin.template:
    src: backup.sh.j2
    dest: /tmp/backup.sh
    mode: '777'

- name: Copy the backup script into the db2 pod {{ db2_backup_instance_name }}
  shell: "oc cp /tmp/backup.sh {{ db2_namespace }}/{{ db2_pod_name }}:/tmp/backup.sh"

- name: Run backup script on db2 pod {{ db2_backup_instance_name }} as db2inst username... (this can take several minutes)
  shell: oc exec -n {{ db2_namespace }} {{ db2_pod_name }} -- su -lc '/tmp/backup.sh | tee /tmp/backup.log' db2inst1
  register: backup_output
  failed_when: backup_output.rc != 0

- debug:
    msg: "{{ backup_output.stdout_lines }}"


# 5. Create temporary backup folder in source db2wh pod
# -----------------------------------------------------------------------------
- name: "Creating backup folder in {{ db2_backup_instance_name }}"
  shell: |
    oc exec -it -n {{ db2_namespace }} {{ db2_pod_name }} -- bash -c "sudo rm -rf {{ db2_temp_backup_dir }} ; sudo mkdir -p {{ db2_temp_backup_dir }}"
  register: creating_backup_folder_output

- name: "Copying backup files to backup folder in {{ db2_backup_instance_name }}"
  shell: |
    oc exec -it -n {{ db2_namespace }} {{ db2_pod_name }} -- bash -c "sudo cp -p {{ db2_db2inst1_backup_dir }}/* {{ db2_temp_backup_dir }}"
  register: copy_backup_folder_output


# 6. Extract db2wh keystore master key label and copy keystore files to backup folder
# https://www.ibm.com/docs/en/db2/11.5?topic=edr-restoring-encrypted-backup-image-different-system-local-keystore
# -----------------------------------------------------------------------------------------------------------------
- name: "Check current Master Key Label from source keystore.p12"
  shell: |
    oc exec -it -n {{ db2_namespace }} {{ db2_pod_name }} -- su -lc "gsk8capicmd_64 -cert -list all -db '{{ db2_keystore_dir }}/keystore.p12' -stashed" db2inst1
  register: check_master_label_output

- name: "Get current Master Key Label from source keystore.p12"
  vars:
    regex: '\DB2(.*)'
  when: item is regex('\DB2(.*)')
  set_fact:
    master_key_label: "{{ item | regex_search(regex) }}"
  with_items: "{{ check_master_label_output.stdout_lines | list }}"

- name: "Extract Master Key Label from keystore.p12"
  shell: |
    oc exec -it -n {{ db2_namespace }} {{ db2_pod_name }} -- su -lc "gsk8capicmd_64 -secretkey -extract -db '{{ db2_keystore_dir }}/keystore.p12' -stashed -label '{{ master_key_label }}' -format ascii -target '{{ db2_keystore_dir }}/master_key_label.kdb'" db2inst1
  register: extract_master_label_output

- name: "Copying Master Key Label secret to backup folder in {{ db2_backup_instance_name }}"
  shell: |
    oc exec -it -n {{ db2_namespace }} {{ db2_pod_name }} -- bash -c "sudo cp -a -p {{ db2_keystore_dir }}/. {{ db2_temp_backup_dir }}"
  register: copy_bkp_locally_output

- name: "Applying db2uadm permissions to copy backup files from {{ db2_backup_instance_name }}"
  shell: |
    oc exec -it -n {{ db2_namespace }} {{ db2_pod_name }} -- bash -c "sudo chown -R db2uadm {{ db2_temp_backup_dir }}/"
  register: apply_db2uadm_output


# 7. Download db2 backup files to local machine
# -----------------------------------------------------------------------------
- name: "Downloading backup files from {{ db2_backup_instance_name }} pod to your local machine... (this can take several minutes)"
  shell: |
    oc rsync --progress=true -n {{ db2_namespace }} {{ db2_pod_name }}:{{ db2_temp_backup_dir }}/. {{ db2_backup_dir }}
  register: copy_bkp_locally_output

- debug:
    msg: "{{ copy_bkp_locally_output }}"


# 8. Delete temporary db2 backup files in source db2wh pod
# -----------------------------------------------------------------------------
- name: "Delete temporary db2 backup files from {{ db2_backup_instance_name }} now that backup is complete"
  when: copy_bkp_locally_output.rc == 0
  shell: |
    oc exec -it -n {{ db2_namespace }} {{ db2_pod_name }} -- bash -c "sudo rm -rf {{ db2_temp_backup_dir }} && sudo rm -rf {{ db2_db2inst1_backup_dir }} && sudo rm -rf {{ db2_keystore_dir }}/master_key_label.kdb"
