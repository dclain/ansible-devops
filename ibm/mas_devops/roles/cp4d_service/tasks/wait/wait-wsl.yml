---

# 1. Wait for CCS
# -----------------------------------------------------------------------------
- name: "Wait for CCS"
  include_tasks: "wait-ccs.yml"


# 2. Wait for DataRefinery CR to be ready
# -----------------------------------------------------------------------------
# We can't stop waiting on Failed status, as it will report failed multiple
# times during initial reconcile ... we just need to keep waiting.
- name: "wait-wsl : Wait for datarefineryStatus 'Completed' (5m interval)"
  kubernetes.core.k8s_info:
    api_version: "datarefinery.cpd.ibm.com/v1beta1"
    kind: DataRefinery
    name: "datarefinery-sample"
    namespace: "{{ cpd_instance_namespace }}"
  register: dr_cr_lookup
  until:
    - dr_cr_lookup.resources is defined
    - dr_cr_lookup.resources | length == 1
    - dr_cr_lookup.resources[0].status is defined
    - dr_cr_lookup.resources[0].status.datarefineryStatus is defined
    - dr_cr_lookup.resources[0].status.datarefineryStatus == "Completed" #  or dr_cr_lookup.resources[0].status.wmlStatus == "Failed"
  retries: 30 # Up to 2.5 hours
  delay: 300 # Every 5 minutes

- name: "wait-wsl : Check that the DataRefinery datarefineryStatus is 'Completed'"
  assert:
    that: dr_cr_lookup.resources[0].status.datarefineryStatus == "Completed"
    fail_msg: "Watson Studio install failed (datarefineryStatus)"


# 3. Wait for WSL service CR to be ready
# -----------------------------------------------------------------------------
# We can't stop waiting on Failed status, as it will report failed multiple
# times during initial reconcile ... we just need to keep waiting.
- name: "wait-wsl : Wait for wsStatus 'Completed' (5m interval)"
  kubernetes.core.k8s_info:
    api_version: "{{ cpd_service_info[cpd_service_name].api_version }}"
    kind: "{{ cpd_service_info[cpd_service_name].crd_kind }}"
    name: "{{ cpd_service_info[cpd_service_name].cr_name }}"
    namespace: "{{ cpd_instance_namespace }}"
  register: cpd_cr_lookup
  until:
    - cpd_cr_lookup.resources is defined
    - cpd_cr_lookup.resources | length == 1
    - cpd_cr_lookup.resources[0].status is defined
    - cpd_cr_lookup.resources[0].status.wsStatus is defined
    - cpd_cr_lookup.resources[0].status.wsStatus == "Completed" # or cpd_cr_lookup.resources[0].status.wsStatus == "Failed"
  retries: 30 # Up to 2.5 hours
  delay: 300 # Every 5 minutes

- name: "wait-wsl : Check that the WSL wsStatus is 'Completed'"
  assert:
    that: cpd_cr_lookup.resources[0].status.wsStatus == "Completed"
    fail_msg: "Watson Studio install failed (wsStatus)"


# At this stage the following will be added to the CP4D installation:
#
# These operators will be installed in ibm-cpd-operators namespace:
# - IBM Data Refinery
# - Watson Studio
# - Common Core Services
#
# These CRs will be created in the ibm-cpd namespace:
# - ccs.ccs.cpd.ibm.com/ccs-cr
# - ws.ws.cpd.ibm.com/ibmcpd-wsl
# - datarefinery.datarefinery.cpd.ibm.com/datarefinery-sample
# - notebookruntime.ws.cpd.ibm.com/ibm-cpd-ws-runtime-py39
#
# oc -n ibm-cpd get ccs,WS,DataRefinery,notebookruntimes
# NAME                         VERSION   RECONCILED   STATUS      AGE
# ccs.ccs.cpd.ibm.com/ccs-cr             4.0.8        Completed   158m
#
# NAME                           VERSION   RECONCILED   STATUS       AGE
# ws.ws.cpd.ibm.com/ibmcpd-wsl   4.0.7                  InProgress   161m
#
# NAME                                                        VERSION   STATUS      AGE
# datarefinery.datarefinery.cpd.ibm.com/datarefinery-sample   4.0.8     Completed   65m
#
# NAME                                                     VERSION   RECONCILED   STATUS      AGE
# notebookruntime.ws.cpd.ibm.com/ibm-cpd-ws-runtime-py39             4.0.8        Completed   53m
#
